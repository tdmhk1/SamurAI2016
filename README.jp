SamurAI 3x3 ゲーム管理システム (2016-01-06)

オプション指定方法や出力形式が変更されました。
サムライのAIとの通信インタフェースには変更がありません。

このディレクトリには SamurAI 3x3 のゲーム管理システムのソースコードと
プレイヤの例、および起動例のスクリプトが入っています。

1. 問題の報告と改良の要請

何かシステムの問題を見つけたら、以下宛に電子メールで報告してください。
	 mailto:samurai2015-contact@ipsj.or.jp
システムについての改良の要請も同様におねがいします。

2. インストール

システムは C++ で記述し、C++11 標準に合うようにしてあるはずです。多く
のシステムでは単に "make all" を実行するだけで良いだろうと思いますが、
場合によってはサブディレクトリ "manager" や "players" の中の Makefile
の最初の数行を修正する必要があるかもしれません。

システムのテストは Linux とg++ 4.9.2 版でしか行っていませんので、他の
システムではうまく動作しないかもしれません。他の環境でも動作した・動作
しなかったといったご報告をいただければ幸いです。

3. ゲーム管理システム

ゲーム管理システムはサブディレクトリ "manager" にあります。インストー
ルすると "gameManager" という名前の実行形式ファイルがこのディレクトリ
にできるはずです。これがゲーム管理システムのメインプログラムです。

4. システムの動かし方

ゲーム管理システムはコマンドラインオプションに指定したサムライの AI プ
ログラムが戦うゲームを実行し、標準出力にゲームのログを書き出します。ゲー
ムのログは別の visualizer プログラムでグラフィカルに見ることができます。

システムを起動するコマンドの例がシェルスクリプト "testmatch.sh" にありま
す。これはサンプルのプレイヤ同士を戦わせるプレイヤになっています。

ゲーム管理システムにはいくつかのオプションがあり、そのうちのいくつかは
指定が必須です。

   -h: ヘルプを出力。

 AI プログラムの起動と制御のオプション:
   -a <command>: AI 起動のコマンドを設定、
   -p <command>: AI 一時停止のコマンドを設定、
   -u <command>: AI 実行再開のコマンドを設定。
   オプション -a, -p, -u は６人のサムライすべてに指定が必要です。
   オプションを適用するサムライはオプションの指定順で決まります。
   つまり、最初の -a オプションは id 0 のサムライの起動コマンドを、
   次の -a は id 1 のサムライの起動コマンドを、といった具合です。

 ログに情報を渡すためのオプション:
   -n <nickname>: AI のニックネーム
   -s <score>: AI のこのゲーム前までの総得点
   -r <rank>: AI のこのゲーム前までの順位
   オプション -n, -s, -r を適用するサムライはオプションの指定順です。
   これらのオプションは指定がなければデフォルト値が使われます。

 デバッグのためのオプション:
   -l <path>: ゲームのログを指定パスに出力、
   -d <path>: AI プログラムへの通信の出力。
        Output path to player N is concatenation of <path> and N.
	サムライ N への出力は <path> の後に N をつけたファイルです。
	たとえば <path> が "dump" なら、出力は dump0 から dump5
	というファイルになりあす。

  出力オプション:
   -t: JSON 形式ではなく、プレインテキストでの出力を指定。


5. プレイヤの例

プレイヤはそれぞれ独立したプログラムで、ゲーム管理システムから起動され
ます。サブディレクトリ "players" の中に、いくつかのプレイヤの例があります。

  randomPlayer: ランダムに行動を決める。
  greedyPlayer: 浅い探索に基づいて、できるだけ多くのセクションを占領し
  　ようとする。

これらのプレイヤ、ことに greedyPlayer は、新しいプレイヤを作るときの出
発点として役立つでしょう。そのソースコード "greedyPlayer.cpp" を見ると
驚くかもしれません。これは定数を4つ定義しているだけです。

メインプログラムといくつかの関数は "players.cpp" に定義してあり、すべ
てのプレイヤ例はこれを共通に使っています。クラス "Player" のオブジェク
トがサムライの行動を決める役割を追っています。それぞれのプレイヤ例は、
それぞれがこのクラス "Player" の子クラスを定義しています。

探索のコードは "planning.cpp" にあり、ここでクラス "Player" の子クラス
であるクラス "PlanningPlayer" を定義しています。この "PlanningPlayer"
は、ある評価関数の値を最大化しようとしますが、"greedyPlayer.cpp" に定
義してある定数は、このさまざまな要素の重みを決めているのです。この重み
を変えればちょっと違う行動を取るプレイヤを簡単に作ることができます。た
とえば、"hurtingMerits" を大きくすれば、できるだけ敵のサムライがいるセ
クションを占領するようにするでしょう。また、"hidingMerits" を大きくす
れば、できるだけ身を隠そうとするようになるでしょう。

他にもいくつかプレイヤ例がありますが、これらは主に振る舞いのおかしなプ
レイヤに対するゲーム管理システムの対処をデバッグするだめのものです。

  timeoutPlayer: 反応が遅い。
  tooActivePlayer: 指示する行動が多すぎる。
  nonCheckingPlayer: ときどき変な行動を指示する。
